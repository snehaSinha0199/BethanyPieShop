// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamWork.Models;

#nullable disable

namespace TeamWork.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeamWork.Models.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentID");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentID = 1,
                            Age = 21,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Amara",
                            Gender = "M",
                            LastName = "Sriram",
                            TeamName = "A"
                        },
                        new
                        {
                            StudentID = 2,
                            Age = 20,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Muskan",
                            Gender = "F",
                            LastName = "Muskan",
                            TeamName = "A"
                        },
                        new
                        {
                            StudentID = 3,
                            Age = 21,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Rahul",
                            Gender = "M",
                            LastName = "Yadav",
                            TeamName = "A"
                        },
                        new
                        {
                            StudentID = 4,
                            Age = 20,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Shraddha",
                            Gender = "F",
                            LastName = "Shraddha",
                            TeamName = "A"
                        },
                        new
                        {
                            StudentID = 5,
                            Age = 20,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Aishwarya",
                            Gender = "F",
                            LastName = "Verma",
                            TeamName = "A"
                        },
                        new
                        {
                            StudentID = 6,
                            Age = 20,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Shreya",
                            Gender = "F",
                            LastName = "",
                            TeamName = "B"
                        },
                        new
                        {
                            StudentID = 7,
                            Age = 20,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Nandhita",
                            Gender = "F",
                            LastName = "",
                            TeamName = "B"
                        },
                        new
                        {
                            StudentID = 8,
                            Age = 20,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Shashwat",
                            Gender = "M",
                            LastName = "",
                            TeamName = "B"
                        },
                        new
                        {
                            StudentID = 9,
                            Age = 21,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Siddarth",
                            Gender = "M",
                            LastName = "",
                            TeamName = "B"
                        },
                        new
                        {
                            StudentID = 10,
                            Age = 20,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Shriya",
                            Gender = "F",
                            LastName = "",
                            TeamName = "B"
                        },
                        new
                        {
                            StudentID = 11,
                            Age = 21,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Sriram",
                            Gender = "M",
                            LastName = "",
                            TeamName = "C"
                        },
                        new
                        {
                            StudentID = 12,
                            Age = 20,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Sneha",
                            Gender = "F",
                            LastName = "Sinha",
                            TeamName = "C"
                        },
                        new
                        {
                            StudentID = 13,
                            Age = 20,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Simran",
                            Gender = "F",
                            LastName = "Singh",
                            TeamName = "C"
                        },
                        new
                        {
                            StudentID = 14,
                            Age = 21,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Subhash",
                            Gender = "M",
                            LastName = "Gurjar",
                            TeamName = "C"
                        },
                        new
                        {
                            StudentID = 15,
                            Age = 19,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Umeed",
                            Gender = "F",
                            LastName = "Chandel",
                            TeamName = "C"
                        },
                        new
                        {
                            StudentID = 16,
                            Age = 21,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Vaibhav",
                            Gender = "M",
                            LastName = "Bhatnagar",
                            TeamName = "D"
                        },
                        new
                        {
                            StudentID = 17,
                            Age = 20,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Pujitha",
                            Gender = "F",
                            LastName = "Vavilapalli",
                            TeamName = "D"
                        },
                        new
                        {
                            StudentID = 18,
                            Age = 20,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Palak",
                            Gender = "F",
                            LastName = "Soni",
                            TeamName = "D"
                        },
                        new
                        {
                            StudentID = 19,
                            Age = 21,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Saurabh",
                            Gender = "M",
                            LastName = "Kumar",
                            TeamName = "D"
                        },
                        new
                        {
                            StudentID = 20,
                            Age = 20,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Tisha",
                            Gender = "F",
                            LastName = "Varshney",
                            TeamName = "D"
                        },
                        new
                        {
                            StudentID = 21,
                            Age = 21,
                            EmailId = "s.sneha@globallogic.com",
                            FirstName = "Aman",
                            Gender = "M",
                            LastName = "Asati",
                            TeamName = "D"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
